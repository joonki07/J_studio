프로그램 [program]:							24/01/19 강의
	소스코드로 잘 짜여진 틀
소스코드:
	컴퓨터와 개빌자가 소통하는 문장들

프로그래밍 언어
1. 컴파일 언어
2. 스크립트언어(인어프린터 언어)
3. 블럭형 언어
4. 교육용 언어

인터프린터 언어:
	한 줄 단위로 해석한다.
	빈번한 수정이 있을때 효과적이다.
	컴파일 언어에 비해 실행속도가 느리다.
	종류 : HTML, JAVAscript, SQL ....

파이썬(python) 특징!
1. 플랫폼에 독립적이다.
2. 객체 지향 언어이다.
	반복되는 소스코드를 하나로 묶어서 관리하기 편하게 하는 언어이다.(상속, 추상화, 캡슐화)
3. 개발속도가 빠르다.(but, 개발속도와 실행속도는 다름)

spyder에서 레이아웃 추가
	View - panes - outilne
	위치변경 : Ctrl + Shift + F5

주석:
1. 간단한 메모
2. 지금 당장 사용하지 않을때 (소스 보류)

변수:
	변수는 저장공간이다.
	X	=	0
     저장공간  연산자  값(상수)
	x라는 이름의 변수에 0이라는 값(상수)를 대입한다.

자료형(type)

정수형  int
실수형  float
문자열  str
논리형  bool
문자    shr

변수의 선언(메모리 할당)
	초기화
	변수명 = 초기값

변수선언시 주의 사항
	같은 이음으로 선언할 수 있으나 두번째 선언은
	기존변수의 값을 수정할 때 사용된다.
	ex) 
		x = 10
		x = 20
		print(x)
		-----------
		20          #20이 출력됨
	초기화를 반드시 해준다.
	되도록 선언부(페이지 상단)에 한꺼번에 선언한다.

변수명 주의사항
	문자부터 시작된다.
	ex) 2a(x)  a2(x)
	특수문자는 사용이 불가능하다.
	단. _ (언더바)는 사용이 가능하다.
	good_day - 팟홀 표기법
	GoodDay - 카멜 표기법
	되도록 소문자를 사용된다.
	되도록 뜻이 있는 단어를 사용한다.
	X = 10 (x) 	age = 10 (o)
#%% => 	셀을 나눌 때 사용한다.							24/01/22 강의

형변환
	1.자동 형변환
		정수 + 졍수 = 정수
			ex) 3 + 2 = 5
		정수 + 실수 = 실수
			ex) 3 + 0.7 = 3.7

	2.강제형변환

 		int(실수) => 정수
		int(10.98) == 10 # 소수 부분은 버려지며 정수 부분만 남는다.
                float(정수) => 실수
  		float(18) == 18.0 # 실수로 변환하게 되면 소수점 뒤에 0이 붙는다.
아스키코드
	컴퓨터가 문자를 기억하고 있는 정수 값
		ex)
서식문자
	1.%
	2.==.format()

	%d : 정수(10진수) [integer]    # d는 decimal의 약자이다.
	%o : 정수(8진수) [octal]
	%x : 정수(16진수) [hexadecimal]
	%f : 실수 [float]	       # %.2f 는 소수점 이하 2자리까지 표시하도록 지정합니다.
	%c : 문자 [character]
        %s : 문자열 [string]
연산자								24/01/23 강의
	기능이 있는 특수문자

연산자의 우선순위
	최우선 연산자
	단항 연산자
	산술 연산자
	쉬프트 연산자
	관계 연산자
	논리 연산자
	삼항 연산자
	대입 연산자

결합성
	하나의 수식에 같은 우선순위의 연산자들이
	여러

조건식
	결과가 참 또는 거짓 둘 중 하나가 나오는 식

파이썬에서의 참과 거짓
True  : 참
False : 거짓 	

관계 연산자
	== 	: 같다.                
	!=	: 다르다.            
	< , >   : 초과, 미만         
	<= , => : 이상, 이하

논리 연산자
	and	: A and B 두 조건식 모두 참일 때 참
	or 	: A or B  둘 중 하나라도 참이면 참

단항 연산자
	not	: not 조건식	=> 조건식이 True면 False

비트
	비트(bit) => 0 또는 1
	2진수   : 0, 1
	10진수  : 0, 1, 2, 3, 4, 5, 6, 7, 8, 9

	바이트(b 
	1b : 8bit
비트 연산
	논리 연산자
	&	and : 두 비트가 모두 1이면 1
	|	OR  : 둘중 하나라도 1이면 1
	^	XOR
	단항 연산자
	~	NOT :  0을 1로, 1를 0으로 바꿔준다.

	~a = ~a-1

	부호 비트
		최상위 비트를 부호비트라고 하며

	쉬프트 연산자
-----------------------------------------------
비트 연산
	논리연산자
		&	논리곱
		|	논리합
`		^	베타논리합
	단항 연산자
		~	논리 부정
	쉬프트 연산자
		>>	A>>B : A를 오른쪽으로 B만큼 이동
		<<	A<<B : A를 왼쪽으로 B만큼 이동
		비트
-----------------------------------------------

삼항 연산자
	참 if 조건식 else 거짓

	않자라 if 성별 == "남자" else 일어나라
	성별이 남자면 않고 나머지는 일어나라
	
제어문 
	<조건문>
if문
(1)----------------------------------------------
if조건식:
	실행할 문장 
if조건식:
	실행할 문장
if조건식:
	실행할 문장
(2)----------------------------------------------
if 조건식:
	실행할 문장
elif조건식:
	실행할 문장
else:
	실행할 문장
__________________________________________________________
	<반복문>
for문 : 반복 횟수를 
	for 변수명 in range(초기값, 끝값, 증감식):
		반복할 문장
while문
	while 조건식:
		반복할 문장
기타 제어문
	break : 인터프린터가
	continue : 아래 문장을
대입 연산자(복합 대입 연산자, 누적연산자)
	+=, -=, *=, /=, //=, %=, ....

	money

컬렉션 - 데이터를 수집

알고리즘
	문제를 해결하기 위한 순서 또는 절차.

자료구조
	의미없는 데이터가 자료구조를 통과하는 순간
	하나의 정보가 된다.
list[리스트]-------------------------------------------------------------------------------
	1.변수를 여러번 선언하지 않고 여러 칸 list를 한 번만 선언하기 위헤서 사용.
	  변수를 선언하면, 값이 한 개만 담기고, 이름도 반드시 붙여야 한다.
	  여러 변수를 선언
	  따라서, list는 이름
	  값을 관리하기 훨씬 편하고 쉽다.

	2.규칙성이 없는 값에 규칙성을 부여하기 위해서
list 선언
	대괄호는 list다.
	list명 = [값1, 값2, 값3 ...]
	list명 = [값]*칸수
	list명 = []	<-- 추후에 내용을 추가할때 

list 길이
	lon(list명)	#list의 길이를 잼
list 사용
	list명 = [1,2,3]

	- 값 넣기
		(마지막에 추가)
		list명.append(값)

		(원하는 위치에 삽입)
		list명.insert(인덱스번호, 값)

	- 값 삭제
		list명.remove(값)
		동일한 값이 여러개일 경우 우선 등장하는 값을 삭제
		
		del list명(인덱스번호)

		list명.clear()
		모든 값 삭제

	- 값 검색
		list명.index(값)
		동일한 값이 여러개일 경우 우선 등장하는 값의 인덱스를 반환

	- 값 수정
		list명[인덱스번호] = 새로운 값

		data
mutable(변할수있는) : list
immutable(변할수 없는) : tuple

dictionary[딕셔너리]-------------------------------------------------------------------
	한 쌍으로 저장되어 관리한다.
	len()을 사용하면 한 쌍을 1로 카운트한다.
dictionary 선언
	dict명 = {키:값,키:값...}
	ex)
	중국집 메뉴판 = {자장면:4500,짬뽕:16000}
dictionary 사용
	- 추가
		
	- 수정
		
	- 삭제
		del dict명
	- 검색
		키 in dict명
		키 not in dict명
